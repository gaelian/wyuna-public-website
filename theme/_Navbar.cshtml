@{
    List<Tuple<string, string>> pages = Context
        .Documents[BookSite.Pages]
        .Where(x => x.Bool(BookSiteKeys.ShowInNavbar, true))
        .Where(x => x.FilePath(Keys.RelativeFilePath)?.FullPath?.StartsWith("index") == (bool?)false)
        .Select(x => Tuple.Create(x.WithoutSettings.String(BookSiteKeys.Title), Context.GetLink(x)))
        .Where(x => !string.IsNullOrEmpty(x.Item1))
        .OrderBy(x => x.Item1)
        .ToList();
    if(Documents[BookSite.Chapters].Any())
    {
        pages.Add(Tuple.Create("Chapters", Context.GetLink(Context.String(BookSiteKeys.ChaptersPath))));
    }
    if(Documents[BookSite.BlogPosts].Any())
    {
        pages.Add(Tuple.Create("Blog", Context.GetLink(Context.String(BookSiteKeys.BlogPath))));
    }
    if(pages.Count > 0)
    {
        @Html.Raw("<nav id=\"nav\"><ul>");
    }
    foreach(Tuple<string, string> page in pages)
    {
        string current = Context.GetLink(Document).StartsWith(page.Item2) ? "current" : null;
        <li class="@current"><a href="@(page.Item2)">@(page.Item1)</a></li>
    }
    if(pages.Count > 0)
    {
        @Html.Raw("</ul></nav>");
    }
    else
    {
        // Hide the nav selector
        <style>
            .toggle {
                display: none;
            }
        </style>
    }
}